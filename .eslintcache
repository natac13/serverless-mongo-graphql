[{"/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/handler.ts":"1","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/serverless.ts":"2","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/constants.ts":"3","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/dbConnection.ts":"4","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/index.ts":"5","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/resolvers/index.ts":"6","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/models/user.ts":"7","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/types/resolver-types.ts":"8","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/schema.ts":"9"},{"size":365,"mtime":1600295849949,"results":"10","hashOfConfig":"11"},{"size":1359,"mtime":1600340342875,"results":"12","hashOfConfig":"11"},{"size":122,"mtime":1600340005458,"results":"13","hashOfConfig":"11"},{"size":1423,"mtime":1600340611209,"results":"14","hashOfConfig":"11"},{"size":1144,"mtime":1600340910598,"results":"15","hashOfConfig":"11"},{"size":972,"mtime":1600339361871,"results":"16","hashOfConfig":"11"},{"size":748,"mtime":1600339186872,"results":"17","hashOfConfig":"11"},{"size":7416,"mtime":1600340146321,"results":"18","hashOfConfig":"11"},{"size":573,"mtime":1600340124017,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":7,"warningCount":1,"fixableErrorCount":7,"fixableWarningCount":0,"source":"22"},"1f35lel",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":17,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/handler.ts",["43","44","45","46","47","48","49","50"],"import { APIGatewayProxyHandler } from 'aws-lambda';\nimport 'source-map-support/register';\n\nexport const hello: APIGatewayProxyHandler = async (event, _context) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'Go Serverless Webpack (Typescript) v1.0! Your function executed successfully!',\n      input: event,\n    }, null, 2),\n  };\n}\n","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/serverless.ts",[],"/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/constants.ts",[],"/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/dbConnection.ts",[],"/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/index.ts",["51"],"import { ApolloServer } from 'apollo-server-lambda'\nimport dbConnection from './dbConnection'\nimport { IS_DEV } from './constants'\nimport resolvers from './resolvers'\nimport typeDefs from './schema'\nimport { APIGatewayProxyHandler } from 'aws-lambda'\n\nif (IS_DEV) {\n  require('dotenv').config()\n}\n\nlet cachedDb = null\n\nconst apolloContext = async ({ event, context }) => {\n  return {\n    event,\n    context\n  }\n}\n\n/* Apollo Graphql Setup */\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: apolloContext,\n  playground: {\n    settings: {\n      // 'request.credentials': 'include',\n      'editor.fontSize': 16,\n      'schema.polling.enable': false\n    }\n  }\n})\n\nexport const handler: APIGatewayProxyHandler = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false\n\n  try {\n    if (!cachedDb) {\n      /* Connect to Database */\n      dbConnection().then((db) => {\n        cachedDb = db\n      })\n    }\n\n    const handlerFunction = server.createHandler({\n      cors: {\n        origin: '*'\n      }\n    })\n\n    return handlerFunction(event, context, callback)\n  } catch (err) {\n    console.log(err)\n  }\n}\n","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/resolvers/index.ts",["52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"import UserModel, { IUserInput } from '../models/user'\nimport { Resolvers } from '../types/resolver-types'\n\nconst resolvers: Resolvers = {\n  Query: {\n    getUser: async (_, args, cxt, ast) => {\n      const User = await UserModel.findById(args._id, {}, { lean: true })\n      return User\n    },\n    allUsers: async (_, args, cxt, ast) => {\n      const users = await UserModel.find(args, {}, { lean: true })\n      return users\n    }\n  },\n  Mutation: {\n    createUser: async (_, args, cxt, ast) => {\n      const newUser = await UserModel.create<IUserInput>(args.User)\n      return newUser\n    },\n    updateUser: async (_, args, cxt, ast) => {\n      const updatedUser = await UserModel.findByIdAndUpdate(\n        args._id,\n        args.Updates,\n        { lean: true, projection: {} }\n      )\n      return updatedUser\n    },\n    deleteUser: async (_, args, cxt, ast) => {\n      await UserModel.findByIdAndDelete(args._id)\n      return true\n    }\n  }\n}\n\nexport default resolvers\n","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/models/user.ts",["87"],"import { Document, Schema, model, connection, Model } from 'mongoose'\n\ninterface IUser extends Document {\n  _id: string\n  name: string\n  email: string\n  position?: string\n  employeeId?: number\n}\n\nexport interface IUserInput {\n  name: IUser['name']\n  email: IUser['email']\n  position?: IUser['position']\n  employeeId?: IUser['employeeId']\n}\n\nconst UserSchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    index: true\n  },\n  position: {\n    type: String\n  },\n  employeeId: {\n    type: Number\n  }\n})\n\nlet UserModel: Model<IUser, {}>\n\ntry {\n  UserModel = connection.model<IUser>('User')\n} catch (err) {\n  UserModel = model<IUser>('User', UserSchema)\n}\n\nexport default UserModel\n","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/types/resolver-types.ts",["88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"import { GraphQLResolveInfo } from 'graphql'\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K]\n}\nexport type RequireFields<T, K extends keyof T> = {\n  [X in Exclude<keyof T, K>]?: T[X]\n} &\n  { [P in K]-?: NonNullable<T[P]> }\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n}\n\nexport type User = {\n  __typename?: 'User'\n  _id?: Maybe<Scalars['ID']>\n  name?: Maybe<Scalars['String']>\n  email?: Maybe<Scalars['String']>\n  position?: Maybe<Scalars['String']>\n  employeeId?: Maybe<Scalars['Int']>\n}\n\nexport type UserInput = {\n  name: Scalars['String']\n  email: Scalars['String']\n  position?: Maybe<Scalars['String']>\n  employeeId?: Maybe<Scalars['Int']>\n}\n\nexport type UserUpdate = {\n  name?: Maybe<Scalars['String']>\n  email?: Maybe<Scalars['String']>\n  position?: Maybe<Scalars['String']>\n  employeeId?: Maybe<Scalars['Int']>\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  getUser?: Maybe<User>\n  allUsers: Array<Maybe<User>>\n}\n\nexport type QueryGetUserArgs = {\n  _id: Scalars['ID']\n}\n\nexport type QueryAllUsersArgs = {\n  name?: Maybe<Scalars['String']>\n  email?: Maybe<Scalars['String']>\n  posistion?: Maybe<Scalars['String']>\n  employeeId?: Maybe<Scalars['Int']>\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  createUser?: Maybe<User>\n  updateUser?: Maybe<User>\n  deleteUser?: Maybe<Scalars['Boolean']>\n}\n\nexport type MutationCreateUserArgs = {\n  User: UserInput\n}\n\nexport type MutationUpdateUserArgs = {\n  _id?: Maybe<Scalars['ID']>\n  Updates: UserUpdate\n}\n\nexport type MutationDeleteUserArgs = {\n  _id?: Maybe<Scalars['ID']>\n}\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>\n}\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>\n}\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> =\n  | LegacyStitchingResolver<TResult, TParent, TContext, TArgs>\n  | NewStitchingResolver<TResult, TParent, TContext, TArgs>\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>\n\nexport interface SubscriptionSubscriberObject<\n  TResult,\n  TKey extends string,\n  TParent,\n  TContext,\n  TArgs\n> {\n  subscribe: SubscriptionSubscribeFn<\n    { [key in TKey]: TResult },\n    TParent,\n    TContext,\n    TArgs\n  >\n  resolve?: SubscriptionResolveFn<\n    TResult,\n    { [key in TKey]: TResult },\n    TContext,\n    TArgs\n  >\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>\n}\n\nexport type SubscriptionObject<\n  TResult,\n  TKey extends string,\n  TParent,\n  TContext,\n  TArgs\n> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>\n\nexport type SubscriptionResolver<\n  TResult,\n  TKey extends string,\n  TParent = {},\n  TContext = {},\n  TArgs = {}\n> =\n  | ((\n      ...args: any[]\n    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>\n\nexport type IsTypeOfResolverFn<T = {}> = (\n  obj: T,\n  info: GraphQLResolveInfo\n) => boolean | Promise<boolean>\n\nexport type NextResolverFn<T> = () => Promise<T>\n\nexport type DirectiveResolverFn<\n  TResult = {},\n  TParent = {},\n  TContext = {},\n  TArgs = {}\n> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n  User: ResolverTypeWrapper<User>\n  ID: ResolverTypeWrapper<Scalars['ID']>\n  String: ResolverTypeWrapper<Scalars['String']>\n  Int: ResolverTypeWrapper<Scalars['Int']>\n  UserInput: UserInput\n  UserUpdate: UserUpdate\n  Query: ResolverTypeWrapper<{}>\n  Mutation: ResolverTypeWrapper<{}>\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>\n}\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n  User: User\n  ID: Scalars['ID']\n  String: Scalars['String']\n  Int: Scalars['Int']\n  UserInput: UserInput\n  UserUpdate: UserUpdate\n  Query: {}\n  Mutation: {}\n  Boolean: Scalars['Boolean']\n}\n\nexport type UserResolvers<\n  ContextType = any,\n  ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']\n> = {\n  _id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>\n  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>\n  position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>\n  employeeId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>\n  __isTypeOf?: IsTypeOfResolverFn<ParentType>\n}\n\nexport type QueryResolvers<\n  ContextType = any,\n  ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']\n> = {\n  getUser?: Resolver<\n    Maybe<ResolversTypes['User']>,\n    ParentType,\n    ContextType,\n    RequireFields<QueryGetUserArgs, '_id'>\n  >\n  allUsers?: Resolver<\n    Array<Maybe<ResolversTypes['User']>>,\n    ParentType,\n    ContextType,\n    RequireFields<QueryAllUsersArgs, never>\n  >\n}\n\nexport type MutationResolvers<\n  ContextType = any,\n  ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']\n> = {\n  createUser?: Resolver<\n    Maybe<ResolversTypes['User']>,\n    ParentType,\n    ContextType,\n    RequireFields<MutationCreateUserArgs, 'User'>\n  >\n  updateUser?: Resolver<\n    Maybe<ResolversTypes['User']>,\n    ParentType,\n    ContextType,\n    RequireFields<MutationUpdateUserArgs, 'Updates'>\n  >\n  deleteUser?: Resolver<\n    Maybe<ResolversTypes['Boolean']>,\n    ParentType,\n    ContextType,\n    RequireFields<MutationDeleteUserArgs, never>\n  >\n}\n\nexport type Resolvers<ContextType = any> = {\n  User?: UserResolvers<ContextType>\n  Query?: QueryResolvers<ContextType>\n  Mutation?: MutationResolvers<ContextType>\n}\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers<ContextType = any> = Resolvers<ContextType>\n","/home/natac/JavaScript/sandbox/SeverlessMongoGraphql/src/schema.ts",[],{"ruleId":"105","severity":2,"message":"106","line":1,"column":52,"nodeType":null,"endLine":1,"endColumn":53,"fix":"107"},{"ruleId":"105","severity":2,"message":"106","line":2,"column":37,"nodeType":null,"endLine":2,"endColumn":38,"fix":"108"},{"ruleId":"109","severity":1,"message":"110","line":4,"column":60,"nodeType":"111","messageId":"112","endLine":4,"endColumn":68},{"ruleId":"105","severity":2,"message":"113","line":7,"column":26,"nodeType":null,"endLine":7,"endColumn":26,"fix":"114"},{"ruleId":"105","severity":2,"message":"115","line":8,"column":1,"nodeType":null,"endLine":8,"endColumn":15,"fix":"116"},{"ruleId":"105","severity":2,"message":"117","line":9,"column":1,"nodeType":null,"endLine":9,"endColumn":20,"fix":"118"},{"ruleId":"105","severity":2,"message":"119","line":10,"column":1,"nodeType":null,"endLine":10,"endColumn":17,"fix":"120"},{"ruleId":"105","severity":2,"message":"106","line":11,"column":4,"nodeType":null,"endLine":11,"endColumn":5,"fix":"121"},{"ruleId":"122","severity":2,"message":"123","line":9,"column":3,"nodeType":"124","messageId":"125","endLine":9,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":6,"column":14,"nodeType":"128","messageId":"129","endLine":6,"endColumn":42},{"ruleId":"126","severity":1,"message":"130","line":6,"column":21,"nodeType":"111","messageId":"131","endLine":6,"endColumn":22},{"ruleId":"126","severity":1,"message":"132","line":6,"column":24,"nodeType":"111","messageId":"131","endLine":6,"endColumn":28},{"ruleId":"126","severity":1,"message":"133","line":6,"column":30,"nodeType":"111","messageId":"131","endLine":6,"endColumn":33},{"ruleId":"109","severity":1,"message":"134","line":6,"column":30,"nodeType":"111","messageId":"112","endLine":6,"endColumn":33},{"ruleId":"126","severity":1,"message":"135","line":6,"column":35,"nodeType":"111","messageId":"131","endLine":6,"endColumn":38},{"ruleId":"109","severity":1,"message":"136","line":6,"column":35,"nodeType":"111","messageId":"112","endLine":6,"endColumn":38},{"ruleId":"126","severity":1,"message":"127","line":10,"column":15,"nodeType":"128","messageId":"129","endLine":10,"endColumn":43},{"ruleId":"126","severity":1,"message":"130","line":10,"column":22,"nodeType":"111","messageId":"131","endLine":10,"endColumn":23},{"ruleId":"126","severity":1,"message":"132","line":10,"column":25,"nodeType":"111","messageId":"131","endLine":10,"endColumn":29},{"ruleId":"126","severity":1,"message":"133","line":10,"column":31,"nodeType":"111","messageId":"131","endLine":10,"endColumn":34},{"ruleId":"109","severity":1,"message":"134","line":10,"column":31,"nodeType":"111","messageId":"112","endLine":10,"endColumn":34},{"ruleId":"126","severity":1,"message":"135","line":10,"column":36,"nodeType":"111","messageId":"131","endLine":10,"endColumn":39},{"ruleId":"109","severity":1,"message":"136","line":10,"column":36,"nodeType":"111","messageId":"112","endLine":10,"endColumn":39},{"ruleId":"126","severity":1,"message":"127","line":16,"column":17,"nodeType":"128","messageId":"129","endLine":16,"endColumn":45},{"ruleId":"126","severity":1,"message":"130","line":16,"column":24,"nodeType":"111","messageId":"131","endLine":16,"endColumn":25},{"ruleId":"126","severity":1,"message":"132","line":16,"column":27,"nodeType":"111","messageId":"131","endLine":16,"endColumn":31},{"ruleId":"126","severity":1,"message":"133","line":16,"column":33,"nodeType":"111","messageId":"131","endLine":16,"endColumn":36},{"ruleId":"109","severity":1,"message":"134","line":16,"column":33,"nodeType":"111","messageId":"112","endLine":16,"endColumn":36},{"ruleId":"126","severity":1,"message":"135","line":16,"column":38,"nodeType":"111","messageId":"131","endLine":16,"endColumn":41},{"ruleId":"109","severity":1,"message":"136","line":16,"column":38,"nodeType":"111","messageId":"112","endLine":16,"endColumn":41},{"ruleId":"126","severity":1,"message":"127","line":20,"column":17,"nodeType":"128","messageId":"129","endLine":20,"endColumn":45},{"ruleId":"126","severity":1,"message":"130","line":20,"column":24,"nodeType":"111","messageId":"131","endLine":20,"endColumn":25},{"ruleId":"126","severity":1,"message":"132","line":20,"column":27,"nodeType":"111","messageId":"131","endLine":20,"endColumn":31},{"ruleId":"126","severity":1,"message":"133","line":20,"column":33,"nodeType":"111","messageId":"131","endLine":20,"endColumn":36},{"ruleId":"109","severity":1,"message":"134","line":20,"column":33,"nodeType":"111","messageId":"112","endLine":20,"endColumn":36},{"ruleId":"126","severity":1,"message":"135","line":20,"column":38,"nodeType":"111","messageId":"131","endLine":20,"endColumn":41},{"ruleId":"109","severity":1,"message":"136","line":20,"column":38,"nodeType":"111","messageId":"112","endLine":20,"endColumn":41},{"ruleId":"126","severity":1,"message":"127","line":28,"column":17,"nodeType":"128","messageId":"129","endLine":28,"endColumn":45},{"ruleId":"126","severity":1,"message":"130","line":28,"column":24,"nodeType":"111","messageId":"131","endLine":28,"endColumn":25},{"ruleId":"126","severity":1,"message":"132","line":28,"column":27,"nodeType":"111","messageId":"131","endLine":28,"endColumn":31},{"ruleId":"126","severity":1,"message":"133","line":28,"column":33,"nodeType":"111","messageId":"131","endLine":28,"endColumn":36},{"ruleId":"109","severity":1,"message":"134","line":28,"column":33,"nodeType":"111","messageId":"112","endLine":28,"endColumn":36},{"ruleId":"126","severity":1,"message":"135","line":28,"column":38,"nodeType":"111","messageId":"131","endLine":28,"endColumn":41},{"ruleId":"109","severity":1,"message":"136","line":28,"column":38,"nodeType":"111","messageId":"112","endLine":28,"endColumn":41},{"ruleId":"137","severity":2,"message":"138","line":36,"column":29,"nodeType":"139","messageId":"140","endLine":36,"endColumn":31},{"ruleId":"137","severity":2,"message":"138","line":93,"column":41,"nodeType":"139","messageId":"140","endLine":93,"endColumn":43},{"ruleId":"137","severity":2,"message":"138","line":93,"column":56,"nodeType":"139","messageId":"140","endLine":93,"endColumn":58},{"ruleId":"137","severity":2,"message":"138","line":93,"column":68,"nodeType":"139","messageId":"140","endLine":93,"endColumn":70},{"ruleId":"137","severity":2,"message":"138","line":157,"column":13,"nodeType":"139","messageId":"140","endLine":157,"endColumn":15},{"ruleId":"137","severity":2,"message":"138","line":158,"column":14,"nodeType":"139","messageId":"140","endLine":158,"endColumn":16},{"ruleId":"137","severity":2,"message":"138","line":159,"column":11,"nodeType":"139","messageId":"140","endLine":159,"endColumn":13},{"ruleId":"137","severity":2,"message":"138","line":166,"column":45,"nodeType":"139","messageId":"140","endLine":166,"endColumn":47},{"ruleId":"137","severity":2,"message":"138","line":166,"column":60,"nodeType":"139","messageId":"140","endLine":166,"endColumn":62},{"ruleId":"137","severity":2,"message":"138","line":172,"column":36,"nodeType":"139","messageId":"140","endLine":172,"endColumn":38},{"ruleId":"137","severity":2,"message":"138","line":180,"column":13,"nodeType":"139","messageId":"140","endLine":180,"endColumn":15},{"ruleId":"137","severity":2,"message":"138","line":181,"column":13,"nodeType":"139","messageId":"140","endLine":181,"endColumn":15},{"ruleId":"137","severity":2,"message":"138","line":182,"column":14,"nodeType":"139","messageId":"140","endLine":182,"endColumn":16},{"ruleId":"137","severity":2,"message":"138","line":183,"column":11,"nodeType":"139","messageId":"140","endLine":183,"endColumn":13},{"ruleId":"137","severity":2,"message":"138","line":200,"column":30,"nodeType":"139","messageId":"140","endLine":200,"endColumn":32},{"ruleId":"137","severity":2,"message":"138","line":201,"column":33,"nodeType":"139","messageId":"140","endLine":201,"endColumn":35},{"ruleId":"137","severity":2,"message":"138","line":213,"column":10,"nodeType":"139","messageId":"140","endLine":213,"endColumn":12},{"ruleId":"137","severity":2,"message":"138","line":214,"column":13,"nodeType":"139","messageId":"140","endLine":214,"endColumn":15},"prettier/prettier","Delete `;`",{"range":"141","text":"142"},{"range":"143","text":"142"},"@typescript-eslint/no-unused-vars","'_context' is defined but never used.","Identifier","unusedVar","Insert `⏎······`",{"range":"144","text":"145"},"Replace `······message:` with `········message:⏎·········`",{"range":"146","text":"147"},"Replace `······input:·event,` with `········input:·event`",{"range":"148","text":"149"},"Replace `····},·null,·2),` with `······},⏎······null,⏎······2⏎····)`",{"range":"150","text":"151"},{"range":"152","text":"142"},"@typescript-eslint/no-var-requires","Require statement not part of import statement.","CallExpression","noVarReqs","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument '_' should be typed.","missingArgType","Argument 'args' should be typed.","Argument 'cxt' should be typed.","'cxt' is defined but never used.","Argument 'ast' should be typed.","'ast' is defined but never used.","@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","TSTypeLiteral","bannedTypeMessage",[51,52],"",[89,90],[223,223],"\n      ",[225,239],"        message:\n         ",[321,340],"        input: event",[341,357],"      },\n      null,\n      2\n    )",[361,362]]